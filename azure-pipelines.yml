# https://aka.ms/yaml

trigger:
- main

variables:
  Configuration: Release
  AndroidSupportedAbis: arm64-v8a
  AndroidPackageFormat: apk
  RID: android-arm64
  DotNet.Version: 7.0.1xx
  DotNet.Quality: Preview
  Maui.Feeds: --source https://api.nuget.org/v3/index.json --source https://pkgs.dev.azure.com/dnceng/public/_packaging/darc-pub-dotnet-runtime-1e1f688d/nuget/v3/index.json
  MauiTargetFramework: net7.0
  NugetSecurityAnalysisWarningLevel: warn
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  RemoveDotNet: true

jobs:

- job: Xamarin
  condition: false
  pool:
    vmImage: macOS-latest
  steps:

  - task: UseDotNet@2
    displayName: Use .NET $(DotNet.Version)
    inputs:
      version: $(DotNet.Version)
      includePreviewVersions: true

  - bash: >
      dotnet tool install boots --tool-path boots &&
      ./boots/boots https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/5343278/d17-0/6b0e6b265390832dcfb499e9e1e893c462548a30/xamarin.android-12.1.0.5.pkg
    displayName: install Xamarin.Android

  - task: MSBuild@1
    displayName: build Xamarin.Android app
    inputs:
      solution: XamarinAndroidApp/XamarinAndroidApp/XamarinAndroidApp.csproj
      msbuildArguments: -restore -t:SignAndroidPackage -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinAndroidApp.binlog

  - task: MSBuild@1
    displayName: build Xamarin.Forms Flyout app
    inputs:
      solution: XamarinFormsFlyout/XamarinFormsApp/XamarinFormsApp.Android/XamarinFormsApp.Android.csproj
      msbuildArguments: -restore -t:SignAndroidPackage -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinFormsFlyout.binlog

  - task: MSBuild@1
    displayName: build Xamarin.Forms Blank app
    inputs:
      solution: XamarinFormsBlank/XamarinFormsBlank/XamarinFormsBlank.Android/XamarinFormsBlank.Android.csproj
      msbuildArguments: -restore -t:SignAndroidPackage -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinFormsBlank.binlog

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        XamarinAndroidApp/**/*-Signed.apk
        XamarinFormsFlyout/**/*-Signed.apk
        XamarinFormsBlank/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release

  - task: MSBuild@1
    displayName: build Xamarin.Android app AOT
    inputs:
      solution: XamarinAndroidApp/XamarinAndroidApp/XamarinAndroidApp.csproj
      msbuildArguments: -t:Clean,SignAndroidPackage -p:AotAssemblies=true -p:AndroidEnableProfiledAot=true -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinAndroidApp-Aot.binlog

  - task: MSBuild@1
    displayName: build Xamarin.Forms Flyout app AOT
    inputs:
      solution: XamarinFormsFlyout/XamarinFormsApp/XamarinFormsApp.Android/XamarinFormsApp.Android.csproj
      msbuildArguments: -t:Clean,SignAndroidPackage -p:AotAssemblies=true -p:AndroidEnableProfiledAot=true -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinFormsFlyout-Aot.binlog

  - task: MSBuild@1
    displayName: build Xamarin.Forms Blank app AOT
    inputs:
      solution: XamarinFormsBlank/XamarinFormsBlank/XamarinFormsBlank.Android/XamarinFormsBlank.Android.csproj
      msbuildArguments: -t:Clean,SignAndroidPackage -p:AotAssemblies=true -p:AndroidEnableProfiledAot=true -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinFormsFlyout-Aot.binlog

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        XamarinAndroidApp/**/*-Signed.apk
        XamarinFormsFlyout/**/*-Signed.apk
        XamarinFormsBlank/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release-aot

  - task: PublishBuildArtifacts@1
    displayName: upload artifacts
    inputs:
      artifactName: xamarin-artifacts
    condition: succeededOrFailed()

- job: MAUI
  pool:
    vmImage: macOS-latest
  steps:
  - checkout: self
    submodules: true

  - bash: >
      DOTNET_ROOT=~/.dotnet/ &&
      (if [[ "$(RemoveDotNet)" == "true" ]] ; then rm -rfv $DOTNET_ROOT; fi) &&
      curl -L https://dot.net/v1/dotnet-install.sh --retry 5 --retry-max-time 300 > dotnet-install.sh &&
      chmod +x dotnet-install.sh &&
      ./dotnet-install.sh --channel 6.0 --quality GA --install-dir $DOTNET_ROOT --verbose &&
      PATH="$DOTNET_ROOT:$PATH" &&
      echo "##vso[task.setvariable variable=DOTNET_ROOT]$DOTNET_ROOT" &&
      echo "##vso[task.setvariable variable=PATH]$PATH"
    displayName: install .NET 6.0
    condition: and(succeeded(), ne(variables['agent.os'], 'Windows_NT'))

  - bash: >
      DOTNET_ROOT=~/.dotnet/ &&
      curl -L https://dot.net/v1/dotnet-install.sh --retry 5 --retry-max-time 300 > dotnet-install.sh &&
      chmod +x dotnet-install.sh &&
      ./dotnet-install.sh --channel $(DotNet.Version) --quality $(DotNet.Quality) --install-dir $DOTNET_ROOT --verbose &&
      PATH="$DOTNET_ROOT:$PATH" &&
      echo "##vso[task.setvariable variable=DOTNET_ROOT]$DOTNET_ROOT" &&
      echo "##vso[task.setvariable variable=PATH]$PATH"
    displayName: install .NET $(DotNet.Version)
    condition: and(succeeded(), ne(variables['agent.os'], 'Windows_NT'))

  - script: dotnet --info
    displayName: display dotnet --info

  - script: asdf
    displayName: stop build

  - task: UseDotNet@2
    displayName: Use .NET $(DotNet.Version)
    inputs:
      version: $(DotNet.Version)
      includePreviewVersions: true

  - bash: dotnet workload install maui $(Maui.Feeds) --verbosity diag
    displayName: install optional workloads

  - bash: >
      dotnet new android -o HelloAndroid &&
      dotnet new maui -o HelloMaui
    displayName: dotnet new

  - bash: dotnet build HelloAndroid/HelloAndroid.csproj -r $(RID) -p:RunAOTCompilation=false -bl:$(Build.ArtifactStagingDirectory)/logs/HelloAndroid.binlog
    displayName: build android

  - bash: >
      dotnet restore HelloMaui/HelloMaui.csproj -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMaui-restore.binlog &&
      dotnet build HelloMaui/HelloMaui.csproj -f $(MauiTargetFramework)-android -r $(RID) -p:RunAOTCompilation=false --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMaui.binlog
    displayName: build maui

  - bash: >
      dotnet restore HelloMauiOld/HelloMauiOld.csproj -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMauiOld-restore.binlog &&
      dotnet build HelloMauiOld/HelloMauiOld.csproj -f $(MauiTargetFramework)-android -r $(RID) -p:RunAOTCompilation=false --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMauiOld.binlog
    displayName: build old maui

  - bash: >
      dotnet restore external/dotnet-podcasts/src/Mobile/Microsoft.NetConf2021.Maui.csproj -bl:$(Build.ArtifactStagingDirectory)/logs/dotnet-podcasts-restore.binlog &&
      dotnet build external/dotnet-podcasts/src/Mobile/Microsoft.NetConf2021.Maui.csproj -f $(MauiTargetFramework)-android -r $(RID) -p:RunAOTCompilation=false --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/dotnet-podcasts.binlog
    displayName: build podcast

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        HelloAndroid/**/*-Signed.apk
        HelloMaui/**/*-Signed.apk
        HelloMauiOld/**/*-Signed.apk
        external/dotnet-podcasts/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release

  - bash: dotnet build HelloAndroid/HelloAndroid.csproj -r $(RID) -t:Rebuild -p:UseInterpreter=true -p:RunAOTCompilation=false -bl:$(Build.ArtifactStagingDirectory)/logs/HelloAndroid-Interp.binlog
    displayName: build android interp

  - bash: dotnet build HelloMaui/HelloMaui.csproj -f $(MauiTargetFramework)-android -r $(RID) -t:Rebuild -p:UseInterpreter=true -p:RunAOTCompilation=false --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMaui-Interp.binlog
    displayName: build maui interp

  - bash: dotnet build HelloMauiOld/HelloMauiOld.csproj -f $(MauiTargetFramework)-android -r $(RID) -t:Rebuild -p:UseInterpreter=true -p:RunAOTCompilation=false --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMauiOld-Interp.binlog
    displayName: build old maui interp

  - bash: dotnet build external/dotnet-podcasts/src/Mobile/Microsoft.NetConf2021.Maui.csproj -f $(MauiTargetFramework)-android -r $(RID) -t:Rebuild -p:UseInterpreter=true -p:RunAOTCompilation=false --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/dotnet-podcasts-Interp.binlog
    displayName: build podcast interp

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        HelloAndroid/**/*-Signed.apk
        HelloMaui/**/*-Signed.apk
        HelloMauiOld/**/*-Signed.apk
        external/dotnet-podcasts/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release-interp

  - bash: dotnet build HelloAndroid/HelloAndroid.csproj -r $(RID) -t:Rebuild -p:RunAOTCompilation=true -p:AndroidEnableProfiledAot=true -bl:$(Build.ArtifactStagingDirectory)/logs/HelloAndroid-Aot.binlog
    displayName: build android AOT

  - bash: dotnet build HelloMaui/HelloMaui.csproj -f $(MauiTargetFramework)-android -r $(RID) -t:Rebuild -p:RunAOTCompilation=true -p:AndroidEnableProfiledAot=true --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMaui-Aot.binlog
    displayName: build maui AOT

  - bash: dotnet build HelloMauiOld/HelloMauiOld.csproj -f $(MauiTargetFramework)-android -r $(RID) -t:Rebuild -p:RunAOTCompilation=true -p:AndroidEnableProfiledAot=true --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMauiOld-Aot.binlog
    displayName: build old maui AOT

  - bash: dotnet build external/dotnet-podcasts/src/Mobile/Microsoft.NetConf2021.Maui.csproj -f $(MauiTargetFramework)-android -r $(RID) -t:Rebuild -p:RunAOTCompilation=true -p:AndroidEnableProfiledAot=true --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/dotnet-podcasts-Aot.binlog
    displayName: build podcast AOT

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        HelloAndroid/**/*-Signed.apk
        HelloMaui/**/*-Signed.apk
        HelloMauiOld/**/*-Signed.apk
        external/dotnet-podcasts/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release-aot

  - task: PublishBuildArtifacts@1
    displayName: upload artifacts
    inputs:
      artifactName: maui-artifacts
    condition: succeededOrFailed()
