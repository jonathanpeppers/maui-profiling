# https://aka.ms/yaml

trigger:
- main

variables:
  Configuration: Release
  AndroidSupportedAbis: arm64-v8a
  AndroidPackageFormat: apk
  RID: android-arm64
  DotNet.Version: 6.0.201
  DotNet.Root: /usr/local/share/dotnet/
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:

- job: Xamarin
  condition: false
  pool:
    vmImage: macOS-latest
  steps:

  - task: UseDotNet@2
    displayName: Use .NET 6
    inputs:
      version: $(DotNet.Version)

  - bash: >
      dotnet tool install boots --tool-path boots &&
      ./boots/boots https://dl.internalx.com/vsts-devdiv/Xamarin.Android/public/5343278/d17-0/6b0e6b265390832dcfb499e9e1e893c462548a30/xamarin.android-12.1.0.5.pkg
    displayName: install Xamarin.Android

  - task: MSBuild@1
    displayName: build Xamarin.Android app
    inputs:
      solution: XamarinAndroidApp/XamarinAndroidApp/XamarinAndroidApp.csproj
      msbuildArguments: -restore -t:SignAndroidPackage -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinAndroidApp.binlog

  - task: MSBuild@1
    displayName: build Xamarin.Forms Flyout app
    inputs:
      solution: XamarinFormsFlyout/XamarinFormsApp/XamarinFormsApp.Android/XamarinFormsApp.Android.csproj
      msbuildArguments: -restore -t:SignAndroidPackage -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinFormsFlyout.binlog

  - task: MSBuild@1
    displayName: build Xamarin.Forms Blank app
    inputs:
      solution: XamarinFormsBlank/XamarinFormsBlank/XamarinFormsBlank.Android/XamarinFormsBlank.Android.csproj
      msbuildArguments: -restore -t:SignAndroidPackage -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinFormsBlank.binlog

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        XamarinAndroidApp/**/*-Signed.apk
        XamarinFormsFlyout/**/*-Signed.apk
        XamarinFormsBlank/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release

  - task: MSBuild@1
    displayName: build Xamarin.Android app AOT
    inputs:
      solution: XamarinAndroidApp/XamarinAndroidApp/XamarinAndroidApp.csproj
      msbuildArguments: -t:Clean,SignAndroidPackage -p:AotAssemblies=true -p:AndroidEnableProfiledAot=true -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinAndroidApp-Aot.binlog

  - task: MSBuild@1
    displayName: build Xamarin.Forms Flyout app AOT
    inputs:
      solution: XamarinFormsFlyout/XamarinFormsApp/XamarinFormsApp.Android/XamarinFormsApp.Android.csproj
      msbuildArguments: -t:Clean,SignAndroidPackage -p:AotAssemblies=true -p:AndroidEnableProfiledAot=true -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinFormsFlyout-Aot.binlog

  - task: MSBuild@1
    displayName: build Xamarin.Forms Blank app AOT
    inputs:
      solution: XamarinFormsBlank/XamarinFormsBlank/XamarinFormsBlank.Android/XamarinFormsBlank.Android.csproj
      msbuildArguments: -t:Clean,SignAndroidPackage -p:AotAssemblies=true -p:AndroidEnableProfiledAot=true -bl:$(Build.ArtifactStagingDirectory)/logs/XamarinFormsFlyout-Aot.binlog

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        XamarinAndroidApp/**/*-Signed.apk
        XamarinFormsFlyout/**/*-Signed.apk
        XamarinFormsBlank/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release-aot

  - task: PublishBuildArtifacts@1
    displayName: upload artifacts
    inputs:
      artifactName: xamarin-artifacts
    condition: succeededOrFailed()

- job: MAUI
  pool:
    vmImage: macOS-latest
  steps:

  - bash: >
      export PATH="$(DotNet.Root):$PATH" &&
      curl -L https://dot.net/v1/dotnet-install.sh > dotnet-install.sh &&
      sh dotnet-install.sh --version $(DotNet.Version) --install-dir $(DotNet.Root) --azure-feed https://dotnetbuilds.blob.core.windows.net/public --verbose &&
      dotnet --list-sdks &&
      echo "##vso[task.setvariable variable=PATH]$PATH"
    displayName: install .NET $(DotNet.Version)

  - powershell: |
      $ProgressPreference = 'SilentlyContinue'
      Invoke-WebRequest https://aka.ms/dotnet/maui/maui-install.ps1 -OutFile maui-install.ps1
      ./maui-install.ps1 -b 'release/6.0.2xx-preview14' -v '$(DotNet.Version)'
    displayName: install optional workloads

  - bash: >
      dotnet new android -o HelloAndroid &&
      dotnet new maui -o HelloMaui &&
      dotnet new nugetconfig -o HelloMaui &&
      dotnet nuget add source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet6/nuget/v3/index.json --name dotnet6 --configfile HelloMaui/nuget.config
    displayName: dotnet new

  - bash: dotnet build HelloAndroid/HelloAndroid.csproj -r $(RID) -bl:$(Build.ArtifactStagingDirectory)/logs/HelloAndroid.binlog
    displayName: build android

  - bash: >
      dotnet restore HelloMaui/HelloMaui.csproj -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMaui-restore.binlog &&
      dotnet build HelloMaui/HelloMaui.csproj -f net6.0-android -r $(RID) --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMaui.binlog
    displayName: build maui

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        HelloAndroid/**/*-Signed.apk
        HelloMaui/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release

  - bash: dotnet build HelloAndroid/HelloAndroid.csproj -r $(RID) -t:Rebuild -p:UseInterpreter=true -bl:$(Build.ArtifactStagingDirectory)/logs/HelloAndroid-Interp.binlog
    displayName: build android interp

  - bash: dotnet build HelloMaui/HelloMaui.csproj -f net6.0-android -r $(RID) -t:Rebuild -p:UseInterpreter=true --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMaui-Interp.binlog
    displayName: build maui interp

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        HelloAndroid/**/*-Signed.apk
        HelloMaui/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release-interp

  - bash: dotnet build HelloAndroid/HelloAndroid.csproj -r $(RID) -t:Rebuild -p:RunAOTCompilation=true -p:AndroidEnableProfiledAot=true -bl:$(Build.ArtifactStagingDirectory)/logs/HelloAndroid-Aot.binlog
    displayName: build android AOT

  - bash: dotnet build HelloMaui/HelloMaui.csproj -f net6.0-android -r $(RID) -t:Rebuild -p:RunAOTCompilation=true -p:AndroidEnableProfiledAot=true --no-restore -bl:$(Build.ArtifactStagingDirectory)/logs/HelloMaui-Aot.binlog
    displayName: build maui AOT

  - task: CopyFiles@2
    displayName: copy apks
    inputs:
      contents: |
        HelloAndroid/**/*-Signed.apk
        HelloMaui/**/*-Signed.apk
      flattenFolders: true
      targetFolder: $(Build.ArtifactStagingDirectory)/release-aot

  - task: PublishBuildArtifacts@1
    displayName: upload artifacts
    inputs:
      artifactName: maui-artifacts
    condition: succeededOrFailed()
